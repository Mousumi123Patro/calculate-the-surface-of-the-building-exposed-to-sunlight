import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

public class Test {

	/**
	 * 
	 * @param firstBuildingCoords
	 * @return heightandWidthofFirstBuilding
	 */
	double calcHeightandWidthofFirstBuilding(double[][] firstBuildingCoords) {

		double height = 0, width = 0;

		for (int i = 0; i < firstBuildingCoords.length - 1; i++) {
			if (firstBuildingCoords[i][0] != firstBuildingCoords[i + 1][0]) {
				width = Math.abs(firstBuildingCoords[i + 1][0] - firstBuildingCoords[i][0]);
			}

			if (firstBuildingCoords[i][1] != firstBuildingCoords[i + 1][1]) {
				height = Math.abs(firstBuildingCoords[i + 1][1] - firstBuildingCoords[i][1]);
			}
		}
		return height + width;
	}

	/**
	 * 
	 * @param buildingsCoords
	 * @param sourceCoord
	 * @return lengthExposedToSunlight
	 */
	double lengthExposedToSunlight(double[][][] buildingsCoords, double[] sourceCoord) {

		double lengthExposedToSunlight = 0, widthOfBuilding = 0, heightOfBuildingExposedToSunlight = 0;

		for (int i = 0; i < buildingsCoords.length; i++) {
			if (i == 0) {
				// calculate height and width of the first building
				lengthExposedToSunlight += calcHeightandWidthofFirstBuilding(buildingsCoords[0]);
			} else {
				/***
				 * calculate height and width of the next buildings exposed to the sunlight
				 ** (using trigonometry height and distance concept)
				 */
				// STEP-1 calculate width of the building
				for (int j = 0; j < buildingsCoords[i].length - 1; j++) {
					if (buildingsCoords[i][j][0] != buildingsCoords[i][j + 1][0]) {
						widthOfBuilding = Math.abs(buildingsCoords[i][j + 1][0] - buildingsCoords[i][j][0]);
					}
				}

				// STEP-2 calculate height of the building exposed to the sunlight
				// STEP-3 calculate the distance between source to the current building both
				// horizontally and vertically
				// (SO to A distance in horizontal direction)
				double minXofCurrBuilding = buildingsCoords[i][0][0];
				for (int j = 1; j < buildingsCoords[i].length - 1; j++) {
					if (minXofCurrBuilding > buildingsCoords[i][j][0]) {
						minXofCurrBuilding = buildingsCoords[i][j][0];
					}
				}
				double sourceToCurrBuildingDistanceHorizontally = Math.abs(minXofCurrBuilding - sourceCoord[0]);

				// (SO to A distance in vertical direction)
				double maxYofCurrBuilding = buildingsCoords[i][0][1];
				for (int j = 1; j < buildingsCoords[i].length - 1; j++) {
					if (maxYofCurrBuilding < buildingsCoords[i][j][1]) {
						maxYofCurrBuilding = buildingsCoords[i][j][1];
					}
				}
				double sourceToCurrBuildingDistanceVertically = Math.abs(maxYofCurrBuilding - sourceCoord[1]);

				// STEP-4 calculate the distance between source to the previous building both
				// horizontally and vertically
				// (SO to S distance in horizontal direction)
				double maxXofPrevBuilding = buildingsCoords[i - 1][0][0];
				for (int j = 1; j < buildingsCoords[i - 1].length - 1; j++) {
					if (maxXofPrevBuilding < buildingsCoords[i - 1][j][0]) {
						maxXofPrevBuilding = buildingsCoords[i - 1][j][0];
					}
				}
				double sourceToPrevBuildingDistanceHorizontally = Math.abs(maxXofPrevBuilding - sourceCoord[0]);

				// (SO to S distance in vertical direction)
				double maxYofPrevBuilding = buildingsCoords[i - 1][0][1];
				for (int j = 1; j < buildingsCoords[i - 1].length - 1; j++) {
					if (maxYofPrevBuilding < buildingsCoords[i - 1][j][1]) {
						maxYofPrevBuilding = buildingsCoords[i - 1][j][1];
					}
				}
				double sourceToPrevBuildingDistanceVertically = Math.abs(maxYofPrevBuilding - sourceCoord[1]);

				// STEP-5 calculate angle created by the source to the building
				// (tan theta = perpendicular/base)
				double tanTheta = sourceToPrevBuildingDistanceVertically / sourceToPrevBuildingDistanceHorizontally;

				// STEP-6 calculate the distance between source to point I vertically
				// (tan theta = source to I vertically / source to A horizontally)
				double sourceToPointI = sourceToCurrBuildingDistanceHorizontally * tanTheta;

				// STEP-7 calculate A to I distance
				// (source to I distance vertically - source to A distance vertically)
				heightOfBuildingExposedToSunlight = sourceToPointI - sourceToCurrBuildingDistanceVertically;

				// STEP-8 consider height of building exposed to the sunlight if it is +ve
				// If it is -ve then sunlight does not fall on the building, also ignore the
				// width
				if (heightOfBuildingExposedToSunlight > 0) {
					lengthExposedToSunlight += heightOfBuildingExposedToSunlight;
					lengthExposedToSunlight += widthOfBuilding;
				}
			}
		}
		return lengthExposedToSunlight;
	}

	public static void main(String[] args) {

		double[][][] buildingCoords = { 
				// first building
				{ { 4, 0 }, { 4, -5 }, { 7, -5}, { 7, 0 } }
				
				// second building
				 , { {0.4, -2}, {0.4, -5}, {2.5, -5}, {2.5, -2} }
		};
		
		double[] sourceCoord = { -3.5, 1 };
		
		// before proceeding to the calculation first arrange the buildings
		// from left to right position
		double[][][] arrangedBuildingCoords = new double[buildingCoords.length][4][2];

		// extract x-coordinates in ascending order
		Set<Double> minXOfEachPlane = new HashSet<>();
		for (int i = 0; i < buildingCoords.length; i++) {
			for (int j = 0; j < buildingCoords[i].length - 1; j++) {
				if (buildingCoords[i][j][0] != buildingCoords[i][j + 1][0]) {
					if (buildingCoords[i][j][0] < buildingCoords[i][j + 1][0]) {
						minXOfEachPlane.add(buildingCoords[i][j][0]);
					} else if (buildingCoords[i][j][0] > buildingCoords[i][j + 1][0]) {
						minXOfEachPlane.add(buildingCoords[i][j + 1][0]);
					}
				}
			}
		}
		TreeSet<Double> sortedCoordinates = new TreeSet<Double>(minXOfEachPlane); 		
		
			a: for (int i = 0; i < buildingCoords.length; i++) {
				for (int j = 0; j < buildingCoords[i].length; j++) {
					int counter = 0;
					for (double sortedCoordinate : sortedCoordinates) {
						if (sortedCoordinate == buildingCoords[i][j][0]) {
							arrangedBuildingCoords[i] = buildingCoords[counter];
							continue a; // used to reduce complexity
						}
						counter++;
					}
					counter = 0;
				}
			}
		
		Test obj = new Test();
		System.out.println(obj.lengthExposedToSunlight(arrangedBuildingCoords, sourceCoord));
	}
}
